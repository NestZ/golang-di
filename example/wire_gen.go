// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package example

import (
	"github.com/google/wire"
	"os"
)

// Injectors from di.go:

// injector
func InitializeApplication(dbname string) (*Application, func(), error) {
	myFooer := NewMyFooer()
	connection, cleanup, err := NewConnection(dbname)
	if err != nil {
		return nil, nil, err
	}
	orderRepository, err := NewOrderRepository(connection)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	foodService, err := NewFoodService(orderRepository)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	bar := _wireBarValue
	reader := _wireFileValue
	containS := NewContainS()
	int2 := containS.S
	application := &Application{
		F:           myFooer,
		FoodService: foodService,
		B:           bar,
		R:           reader,
		S:           int2,
	}
	return application, func() {
		cleanup()
	}, nil
}

var (
	_wireBarValue  = Bar{V: 66}
	_wireFileValue = os.Stdin
)

// di.go:

// these lines will be copied into generated file
var serviceSet = wire.NewSet(NewFoodService)

var repositorySet = wire.NewSet(NewOrderRepository)

var connectionSet = wire.NewSet(NewConnection)

// struct provider, we can specify which struct fields to be injected
var app = wire.Struct(new(Application), "F", "FoodService", "B", "R", "S")
